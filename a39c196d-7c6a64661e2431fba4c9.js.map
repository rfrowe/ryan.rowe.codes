{"version":3,"file":"a39c196d-7c6a64661e2431fba4c9.js","mappings":"uQAgBA,IAAMA,EAAoB,CACtBC,SAAU,sBACVC,KAAM,IAGJC,EAA+B,SAAAC,GAAK,aAAIC,EAAAA,EAAAA,OAAG,GAC7CC,WAAY,YACXF,EAAMG,YAAYC,GAAG,OAAQ,CAC1BC,cAAe,OAH0B,eAAjD,EAOMC,EAAgB,CAAHC,KAAAA,SAAAC,OAAAA,mDAKbC,EAAY,CAAHF,KAAAA,UAAAC,OAAAA,gEAKTE,EAA6B,SAAAV,GAAK,aAAIC,EAAAA,EAAAA,OAAG,GAC3CU,WAAY,QACXX,EAAMG,YAAYS,KAAK,OAAQ,CAC5BD,WAAY,QACZE,UAAW,MACX,wBAAyB,CACrBA,UAAW,UANwB,eAA/C,EAWMC,EAA4B,SAAAd,GAAK,aAAIC,EAAAA,EAAAA,OAAG,GAC1Cc,SAAU,EACVC,UAAW,EACXC,UAAWjB,EAAMkB,QAAQ,IACzBC,SAAU,WACVC,WAAY,QACXpB,EAAMG,YAAYS,KAAK,OAAQ,CAC5BQ,WAAY,QACZC,YAAa,OARyB,eAA9C,EAYMC,EAA2B,SAAAtB,GAAK,OAAIC,EAAAA,EAAAA,KAAI,CAC1Cc,SAAU,EACVQ,WAAY,EACZP,UAAW,EACXQ,gBAAiBxB,EAAMyB,QAAQC,QAAQC,MAJE,YAA7C,EAiDA,UA1Ca,SAAC,GAAgD,IAA/CC,EAA+C,EAA/CA,KACX,GAA0BC,EAAAA,EAAAA,UAAS,GAA5BC,EAAP,KAAcC,EAAd,KACMC,GAAkBC,EAAAA,EAAAA,cAAY,kBAAMF,GAAS,SAAAG,GAAC,OAAIA,EAAI,CAAV,GAAf,GAA6B,IAE1DC,GAAQC,EAAAA,EAAAA,UACV,kBAAMR,EACGS,OACAC,MACAC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,WAHpB,IAIGC,QAAO,SAACC,GAAD,OAAwBC,EAAAA,EAAAA,IAAQD,KAASE,EAAAA,EAAAA,IAAUF,EAAK9C,YAAa+C,EAAAA,EAAAA,IAAQD,EAAK9C,SAJ5F,KAKC,CAACD,EANS,GAOjB,CAACgC,IAGC/B,GAAWuC,EAAAA,EAAAA,UAAQ,WACrB,IAAMO,EAAOR,EAAML,EAAQK,EAAMW,QAEjC,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAD,CAAMC,KAAMN,EAAK7C,KAAL6C,SAAqBA,EAAK7C,KAAS,GAAIG,IAAKK,IACpDyC,EAAAA,EAAAA,KAACG,EAAAA,EAAD,CAAejD,IAAKQ,EAAW0C,KAAMR,EAAK9C,SAAUuD,iBAAkBpB,IAL1D,GAQrB,CAACG,EAAOL,IAEX,OACIiB,EAAAA,EAAAA,KAACM,EAAAA,EAAD,CAAcpD,IAAKF,IACfgD,EAAAA,EAAAA,KAACO,EAAAA,EAAD,CAAKrD,IAAKa,IACNiC,EAAAA,EAAAA,KAACQ,EAAAA,EAAD,CAAYC,QAAQ,KAAKvD,IAAKS,GAA9B,SACSqC,EAAAA,EAAAA,KAAAA,KAAAA,MADT,SAESA,EAAAA,EAAAA,KAAAA,KAAAA,MAFT,UAKAA,EAAAA,EAAAA,KAACQ,EAAAA,EAAD,CAAYC,QAAQ,KAAKvD,IAAKS,GACzBb,KAITkD,EAAAA,EAAAA,KAACO,EAAAA,EAAD,CAAKrD,IAAKqB,IArCtB,EA4CO,IAaMmC,EAAO,kBAAMV,EAAAA,EAAAA,KAACW,EAAAA,EAAD,CAAKC,MAAM,mBAA9B,C","sources":["webpack://ryan.rowe.codes/./src/pages/index.tsx"],"sourcesContent":["import ConsoleTypist from \"@components/console\";\nimport Seo from \"@components/seo\";\nimport PageTemplate from \"@components/layout/template\";\nimport { css } from '@emotion/react';\nimport {graphql, PageProps} from \"gatsby\";\nimport ThemedStyles from \"@lib/types/css\";\nimport {isDefined, notNull} from '@lib/util'\nimport {Box, Link, Typography} from \"@mui/material\";\nimport {useCallback, useMemo, useState} from \"react\";\n\ntype Element<T extends readonly unknown[]> = T extends readonly (infer U)[] ? U : never\n\ntype RequiredNotNull<T> = {[K in keyof T]: NonNullable<T[K]>}\n\ntype Post = RequiredNotNull<NonNullable<Element<Queries.GetAllPostsQuery['allMdx']['nodes']>['frontmatter']>>\n\nconst defaultPost: Post = {\n    headline: \"Absolutely Nothing.\",\n    slug: '',\n}\n\nconst containerStyle: ThemedStyles = theme => css({\n    alignItems: 'stretch',\n    [theme.breakpoints.up('md')]: {\n        flexDirection: 'row',\n    }\n})\n\nconst headlineStyle = css({\n    fontFamily: 'monospace',\n    textDecorationLine: 'none'\n})\n\nconst linkStyle = css({\n    textDecorationLine: 'underline',\n    textDecorationColor: 'inherit',\n})\n\nconst bannerMargin: ThemedStyles = theme => css({\n    marginLeft: '10%',\n    [theme.breakpoints.down('md')]: {\n        marginLeft: 'unset',\n        marginTop: '10%',\n        '&:not(:first-of-type)': {\n            marginTop: 'unset',\n        }\n    }\n})\n\nconst bannerStyle: ThemedStyles = theme => css({\n    flexGrow: 1,\n    flexBasis: 0,\n    boxShadow: theme.shadows[10],\n    position: 'relative', // necessary for boxShadow\n    paddingTop: '10%',\n    [theme.breakpoints.down('md')]: {\n        paddingTop: 'unset',\n        paddingLeft: '10%',\n    }\n})\n\nconst imageStyle: ThemedStyles = theme => css({\n    flexGrow: 1,\n    flexShrink: 1,\n    flexBasis: 0,\n    backgroundColor: theme.palette.primary.main,\n})\n\nconst Home = ({data}: PageProps<Queries.GetAllPostsQuery>) => {\n    const [index, setIndex] = useState(0)\n    const advanceHeadline = useCallback(() => setIndex(i => i + 1), [])\n\n    const posts = useMemo(\n        () => data\n                .allMdx\n                .nodes\n                .map(node => node.frontmatter)\n                .filter((post): post is Post => notNull(post) && isDefined(post.headline) && notNull(post.headline))\n            || [defaultPost],\n        [data]\n    )\n\n    const headline = useMemo(() => {\n        const post = posts[index % posts.length]\n\n        return (\n            <Link href={post.slug ? `/blog/${post.slug}` : ''} css={headlineStyle}>\n                <ConsoleTypist css={linkStyle} text={post.headline} onTypingFinished={advanceHeadline} />\n            </Link>\n        )\n    }, [posts, index])\n\n    return (\n        <PageTemplate css={containerStyle}>\n            <Box css={bannerStyle}>\n                <Typography variant='h1' css={bannerMargin}>\n                    Ryan <br/>\n                    Rowe <br/>\n                    Codes\n                </Typography>\n                <Typography variant='h3' css={bannerMargin}>\n                    {headline}\n                </Typography>\n            </Box>\n            {/* TODO: use a real image here. */}\n            <Box css={imageStyle} />\n        </PageTemplate>\n    )\n}\n\nexport default Home\n\nexport const query = graphql`\n    query GetAllPosts {\n        allMdx {\n            nodes {\n                frontmatter {\n                    headline\n                    slug\n                }\n            }\n        }\n    }\n`\n\nexport const Head = () => <Seo title='ryan.rowe.codes' />\n"],"names":["defaultPost","headline","slug","containerStyle","theme","css","alignItems","breakpoints","up","flexDirection","headlineStyle","name","styles","linkStyle","bannerMargin","marginLeft","down","marginTop","bannerStyle","flexGrow","flexBasis","boxShadow","shadows","position","paddingTop","paddingLeft","imageStyle","flexShrink","backgroundColor","palette","primary","main","data","useState","index","setIndex","advanceHeadline","useCallback","i","posts","useMemo","allMdx","nodes","map","node","frontmatter","filter","post","notNull","isDefined","length","___EmotionJSX","Link","href","ConsoleTypist","text","onTypingFinished","PageTemplate","Box","Typography","variant","Head","Seo","title"],"sourceRoot":""}