{"version":3,"file":"component---src-pages-index-tsx-ecb617d6af6cdd299a79.js","mappings":"iJAeMA,EAAwB,kBAAsB,GAAhBC,KAAKC,SAAgB,EAAzD,EAoFA,IAxDsB,SAAC,GAUO,IAT1BC,EASyB,EATzBA,KASyB,IARzBC,iBAAAA,OAQyB,MARN,IAQM,EAPzBC,EAOyB,EAPzBA,iBAOyB,IANzBC,4BAAAA,OAMyB,MANK,IAML,MALzBC,qBAAAA,OAKyB,MALF,IAKE,MAJzBC,wBAAAA,OAIyB,MAJCR,EAID,MAHzBS,oBAAAA,OAGyB,MAHH,GAGG,EAFzBC,EAEyB,EAFzBA,IACAC,EACyB,EADzBA,UAEA,GAAsBC,EAAAA,EAAAA,UAAS,GAAxBC,EAAP,KAAYC,EAAZ,KACA,GAAsCF,EAAAA,EAAAA,UAAST,GAAxCY,EAAP,KAAoBC,EAApB,KACA,EA3BJ,SAA2BC,GACvB,OAAwCL,EAAAA,EAAAA,WAAS,GAA1CM,EAAP,KAAqBC,EAArB,KAEMC,GAASC,EAAAA,EAAAA,UAAQ,WACnB,IAhBeC,EAgBTC,EAAYL,EAAe,EAhBlBI,EAgBiCL,GAhBZP,EAAAA,EAAAA,KAAI,CAC5Cc,cAAe,UACfC,kBAAsBH,EAAL,KACjBI,wBAAyB,aACzBC,wBAAyB,WACzB,qBAAsB,CAClB,MAAO,CACH,QAAW,KAPwB,eAgBiC,GAExE,OAAOC,EAAAA,EAAAA,KAAAA,OAAAA,CAAMlB,IAAKa,GAAX,IAHW,GAInB,CAACL,EAAcD,IAEZY,GAAoBC,EAAAA,EAAAA,cAAY,kBAAMX,GAAgB,SAAAY,GAAK,OAAKA,CAAX,GAAtB,GAAyC,CAACZ,IAE/E,MAAO,CAACC,EAAQF,EAAcW,EAGlC,CAa0DG,CAAkBzB,GAAjEa,EAAP,KAAea,EAAf,KAAiCJ,EAAjC,KAiCA,OA9BAK,EAAAA,EAAAA,YAAU,WACN,IAAIC,EAyBJ,OAtBIpB,IAAgBZ,EACZU,EAAMV,EAAKiC,OACXD,EAAQE,YAAW,kBAAMvB,GAAO,SAAAwB,GAAI,OAAIA,EAAO,CAAhB,GAAb,GAAiC9B,EAAwBK,IACpEA,IAAQV,EAAKiC,SAEpBP,GAAkB,GAClBM,EAAQE,YAAW,kBAAMhC,GAAoBA,GAA3B,GAA+CC,IAGjEO,EAAM,GACNsB,EAAQE,YAAW,kBAAMvB,GAAO,SAAAwB,GAAI,OAAIA,EAAO,CAAhB,GAAb,GAAiC7B,GAC/CwB,GACAJ,GAAkB,IAItBM,EAAQE,YAAW,WACfrB,EAAeb,EADD,GAEfC,GAIJ,gBAAkBmC,IAAVJ,GAAuBK,aAAaL,EAAnD,CA1BK,GA2BN,CAACtB,EAAKE,EAAaZ,KAIlByB,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,MACIA,EAAAA,EAAAA,KAAAA,OAAAA,CAAMlB,IAAKA,EAAKC,UAAWA,GACtBI,EAAY0B,UAAU,EAAG5B,IAE7BO,EAnDb,C,iFC3CO,IAAMsB,EAAU,SAAIC,GAAJ,OAA8C,OAAVA,CAApD,EAMMC,EAAY,SAAID,GAAJ,YAAmDJ,IAAVI,CAA3D,C","sources":["webpack://ryan.rowe.codes/./src/components/console.tsx","webpack://ryan.rowe.codes/./src/lib/util.ts"],"sourcesContent":["import React from \"react\";\nimport {css} from '@emotion/react'\nimport {PropsWithStyle} from '@emotion/react'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\n\ninterface Props {\n    text: string\n    startDelayMillis?: number\n    onTypingFinished?: () => void\n    onTypingFinishedDelayMillis?: number\n    cursorIntervalMillis?: number\n    getInsertionDelayMillis?: (idx: number) => number\n    deletionDelayMillis?: number\n}\n\nconst defaultCharacterDelay = () => Math.random() * 75 + 25\n\nconst blinkingStyle = (interval: number) => css({\n    animationName: 'blinker',\n    animationDuration: `${interval}ms`,\n    animationTimingFunction: 'step-start',\n    animationIterationCount: 'infinite',\n    '@keyframes blinker': {\n        '50%': {\n            'opacity': 0\n        }\n    }\n})\n\nfunction useBlinkingCursor(flashIntervalMillis: number): [JSX.Element, boolean, (flash: boolean) => void] {\n    const [flashEnabled, setFlashEnabled] = useState(false);\n\n    const cursor = useMemo(() => {\n        const cursorCss = flashEnabled ? [blinkingStyle(flashIntervalMillis)] : []\n\n        return <span css={cursorCss}>&#9144;</span>\n    }, [flashEnabled, flashIntervalMillis])\n\n    const setCursorFlashing = useCallback(() => setFlashEnabled(state => !state), [setFlashEnabled])\n\n    return [cursor, flashEnabled, setCursorFlashing]\n}\n\nconst ConsoleTypist = ({\n    text,\n    startDelayMillis = 250,\n    onTypingFinished,\n    onTypingFinishedDelayMillis = 5000,\n    cursorIntervalMillis = 1000,\n    getInsertionDelayMillis = defaultCharacterDelay,\n    deletionDelayMillis = 25,\n    css,\n    className\n}: PropsWithStyle<Props>) => {\n    const [idx, setIdx] = useState(0)\n    const [currentText, setCurrentText] = useState(text)\n    const [cursor, cursorIsFlashing, setCursorFlashing] = useBlinkingCursor(cursorIntervalMillis)\n\n    // Type or erase letters at a pseudo-random, relatively realistic speed.\n    useEffect(() => {\n        let timer: NodeJS.Timeout | undefined\n\n        // When text has changed, erase back to start; otherwise, type entirety of text character by character.\n        if (currentText === text) {\n            if (idx < text.length) {\n                timer = setTimeout(() => setIdx(prev => prev + 1), getInsertionDelayMillis(idx))\n            } else if (idx === text.length) {\n                // Finished typing desired text, notify listener after appropriate delay.\n                setCursorFlashing(true)\n                timer = setTimeout(() => onTypingFinished && onTypingFinished(), onTypingFinishedDelayMillis)\n            }\n        } else {\n            if (idx > 0) {\n                timer = setTimeout(() => setIdx(prev => prev - 1), deletionDelayMillis)\n                if (cursorIsFlashing) {\n                    setCursorFlashing(false)\n                }\n            } else {\n                // Successfully erased to start, begin typing new text.\n                timer = setTimeout(() => {\n                    setCurrentText(text)\n                }, startDelayMillis)\n            }\n        }\n\n        return () => { timer === undefined || clearTimeout(timer) }\n    }, [idx, currentText, text])\n\n\n    return (\n        <>\n            <span css={css} className={className}>\n                {currentText.substring(0, idx)}\n            </span>\n            {cursor}\n        </>\n    )\n}\n\nexport default ConsoleTypist\n","export const notNull = <T>(value: T | null): value is T => value !== null\n\nexport const isNull = <T>(value: T | null): value is null => value === null\n\nexport const isString = <T>(value: T | string): value is string => typeof value === 'string'\n\nexport const isDefined = <T>(value: T | undefined): value is T => value !== undefined\n\nexport const notDefined = <T>(value: T | undefined): value is undefined => value === undefined\n\nexport const findDuplicate = <T>(values: T[]): {value: T} | null => {\n    const seen = new Set<T>()\n    for (const value of values) {\n        if (seen.has(value)) {\n            return {value}\n        }\n\n        seen.add(value)\n    }\n\n    return null\n}\n"],"names":["defaultCharacterDelay","Math","random","text","startDelayMillis","onTypingFinished","onTypingFinishedDelayMillis","cursorIntervalMillis","getInsertionDelayMillis","deletionDelayMillis","css","className","useState","idx","setIdx","currentText","setCurrentText","flashIntervalMillis","flashEnabled","setFlashEnabled","cursor","useMemo","interval","cursorCss","animationName","animationDuration","animationTimingFunction","animationIterationCount","___EmotionJSX","setCursorFlashing","useCallback","state","useBlinkingCursor","cursorIsFlashing","useEffect","timer","length","setTimeout","prev","undefined","clearTimeout","substring","notNull","value","isDefined"],"sourceRoot":""}